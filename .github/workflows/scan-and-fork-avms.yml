name: Scan and Fork Azure Verified Modules

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly
  workflow_dispatch:  # Allow manual triggers from GitHub web GUI

jobs:
  scan-and-fork:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ vars.TAVMLATEST_ADMIN_APPID }}
          private_key: ${{ secrets.TAVMLATEST_ADMIN_PKEY }}
          installation_id: ${{ vars.TAVMLATEST_ADMIN_INSTALLATIONID }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Scan Azure org for AVM repositories
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Search for repositories matching the AVM naming convention
          repos=$(gh api -H "Accept: application/vnd.github+json" \
            /orgs/Azure/repos?per_page=100 \
            --jq '.[] | select(.name | test("^terraform-az(urerm|stack|ad)-avm-(res|pat)-")) | .name')

          # Update the YAML file
          echo "modules:" > config/modules.yml
          for repo in $repos; do
            echo "  - name: $repo" >> config/modules.yml
            echo "    repo: Azure/$repo" >> config/modules.yml
          done

          # Commit and push changes if there are any
          git config user.name "GitHub App"
          git config user.email "<>"
          git add config/modules.yml
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update AVM modules list" && git push)

      - name: Fork repositories to TAVMLatest
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Read the updated modules.yml file
          repos=$(yq e '.modules[].repo' config/modules.yml)

          for repo in $repos; do
            # Check if fork already exists
            if ! gh repo view "TAVMLatest/$(basename $repo)" &>/dev/null; then
              echo "Forking $repo to TAVMLatest organization"
              gh repo fork "$repo" --org TAVMLatest --clone=false
            else
              echo "Fork already exists for $repo"
            fi
          done