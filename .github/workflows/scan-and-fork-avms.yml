name: Scan and Fork Azure Verified Modules

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly
  workflow_dispatch:  # Allow manual triggers from GitHub web GUI

jobs:
  scan-and-fork:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate GitHub App token
        id: generate_token
        run: |
          echo "Debug: Checking variable and secret availability"
          echo "APP_ID is set: ${{ vars.TAVMLATEST_ADMIN_APPID != '' }}"
          echo "INSTALLATION_ID is set: ${{ vars.TAVMLATEST_ADMIN_INSTALLATIONID != '' }}"
          echo "PRIVATE_KEY is set: ${{ secrets.TAVMLATEST_ADMIN_PKEY != '' }}"

          generate_jwt() {
            local now=$(date +%s)
            local payload=$(echo -n "{\"iat\":$now,\"exp\":$((now + 600)),\"iss\":${{ vars.TAVMLATEST_ADMIN_APPID }}}" | openssl base64 -e -A | tr '+/' '-_' | tr -d '=')
            local header=$(echo -n '{"alg":"RS256","typ":"JWT"}' | openssl base64 -e -A | tr '+/' '-_' | tr -d '=')
            local signature=$(echo -n "$header.$payload" | openssl dgst -sha256 -sign <(echo "${{ secrets.TAVMLATEST_ADMIN_PKEY }}") | openssl base64 -e -A | tr '+/' '-_' | tr -d '=')
            echo "$header.$payload.$signature"
          }

          echo "Generating JWT..."
          JWT=$(generate_jwt)
          echo "JWT generated successfully."

          echo "Requesting token from GitHub API..."
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $JWT" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/app/installations/${{ vars.TAVMLATEST_ADMIN_INSTALLATIONID }}/access_tokens")

          echo "API Response: $RESPONSE"

          TOKEN=$(echo "$RESPONSE" | jq -r .token)

          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "Failed to generate token. API response: $RESPONSE"
            exit 1
          fi

          echo "Token generated successfully."
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Scan Azure org for AVM repositories
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          echo "Using token: ${GH_TOKEN:0:10}..."
          # Search for repositories matching the AVM naming convention
          repos=$(gh api -H "Accept: application/vnd.github+json" \
            /orgs/Azure/repos?per_page=100 \
            --jq '.[] | select(.name | test("^terraform-az(urerm|stack|ad)-avm-(res|pat)-")) | .name')

          # Create config directory if it doesn't exist
          mkdir -p config

          # Update the YAML file
          echo "modules:" > config/modules.yml
          for repo in $repos; do
            echo "  - name: $repo" >> config/modules.yml
            echo "    repo: Azure/$repo" >> config/modules.yml
          done

          # Commit and push changes if there are any
          git config user.name "GitHub App"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add config/modules.yml
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update AVM modules list" && git push)

      - name: Fork repositories
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Read the YAML file
          modules=$(yq eval '.modules[].repo' config/modules.yml)

          # Fork each repository
          for repo in $modules; do
            echo "Forking $repo..."
            gh repo fork $repo --org ${{ github.repository_owner }} --clone=false || echo "Failed to fork $repo or already exists"
          done