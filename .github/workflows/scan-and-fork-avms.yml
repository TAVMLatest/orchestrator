name: Scan and Fork Azure Verified Modules

on:
  schedule:
    - cron: '0 0 * * 0' # Run weekly
  workflow_dispatch: # Allow manual triggers from GitHub web GUI

jobs:
  scan-and-fork:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Generate GitHub App token
      id: generate_token
      run: |
        # ... (keep the existing token generation code here)

    - name: Scan Azure org for AVM repositories
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: |
        echo "Using token: ${GH_TOKEN:0:10}..."
        
        fetch_all_repos() {
          local page=1
          while true; do
            local batch=$(gh api -H "Accept: application/vnd.github+json" "/orgs/Azure/repos?per_page=100&page=$page" \
              --jq '.[] | select(.name | test("^terraform-az(urerm|stack|ad)-avm-(res|pat)-")) | .name')
            if [ -z "$batch" ]; then
              break
            fi
            echo "$batch"
            ((page++))
          done
        }

        # Fetch all repositories matching the AVM naming convention
        repos=$(fetch_all_repos)

        # Create config directory if it doesn't exist
        mkdir -p config

        # Update the YAML file
        echo "modules:" > config/modules.yml
        echo "$repos" | while read repo; do
          echo "  - name: $repo" >> config/modules.yml
          echo "    repo: Azure/$repo" >> config/modules.yml
        done

        # Commit and push changes if there are any
        git config user.name "GitHub App"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add config/modules.yml
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update AVM modules list" && git push)

    - name: Fork repositories to TAVMLatest
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: |
        # Read the YAML file
        modules=$(yq eval '.modules[].repo' config/modules.yml)

        # Fork each repository to TAVMLatest
        for repo in $modules; do
          echo "Processing $repo..."
          repo_name=$(basename $repo)
          
          # Check if the repo already exists in TAVMLatest
          if gh repo view "TAVMLatest/$repo_name" &>/dev/null; then
            echo "Repository $repo_name already exists in TAVMLatest. Skipping..."
          else
            echo "Forking $repo to TAVMLatest..."
            gh repo fork $repo --org TAVMLatest --clone=false
          fi
        done